(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     96219,       2493]
NotebookOptionsPosition[     94122,       2422]
NotebookOutlinePosition[     94499,       2438]
CellTagsIndexPosition[     94456,       2435]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Automatically", " ", "generate", " ", "package", " ", "from", " ", 
    "initializtion", " ", "cells", " ", "of", " ", "the", " ", "current", " ",
     "notebook"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"SetOptions", "[", 
   RowBox[{
    RowBox[{"InputNotebook", "[", "]"}], ",", 
    RowBox[{"AutoGeneratedPackage", "\[Rule]", "Automatic"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.663777636459733*^9, 3.663777712128561*^9}, {
  3.733914406837203*^9, 3.7339144075478926`*^9}, {3.733914733952835*^9, 
  3.7339147356576366`*^9}},
 CellID->484687852],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"A", " ", "fix", " ", "for", " ", "usage", " ", "messages"}], ",",
     " ", 
    RowBox[{
     RowBox[{"from", " ", 
      RowBox[{"http", ":"}]}], "//", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
         "questions"}], "/", "3943"}], "/", "usage"}], "-", "displays", "-", 
      "properly", "-", "only", "-", "after", "-", "second", "-", 
      RowBox[{
       RowBox[{"call", "/", "27671"}], "#27671"}]}]}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"System`Dump`fixmessagestring", "[", "System`Dump`s_", "]"}], ":=", 
   RowBox[{"ToString", "@", 
    RowBox[{"InputForm", "@", "System`Dump`s"}]}]}]}]], "Code"],

Cell[CellGroupData[{

Cell["Sequences of settings", "Section",
 CellChangeTimes->{{3.734594019110738*^9, 3.7345940221720524`*^9}, {
  3.7345940665222726`*^9, 3.734594068292148*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "compilationOptionsC", "::", 
   "\"\<Settings for Compile that result in ultimate speedup of the compiled \
code. Use C code as targer and thus require a C compiler installed.\>\""}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"compilationOptionsC", "=", 
   RowBox[{"Sequence", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", "\n", "\t", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<InlineExternalDefinitions\>\"", "->", "True"}], "}"}]}], 
     ",", "\n", "\t", 
     RowBox[{"RuntimeOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<EvaluateSymbolically\>\"", "->", "False"}], "}"}]}]}], 
    "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.7345940329071417`*^9, 3.734594270299597*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Patterns and test functions", "Section",
 CellChangeTimes->{{3.7339903638501253`*^9, 3.7339903741973023`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FunctionQ", "::", "usage"}], "=", 
   "\"\<FunctionQ[expr_] tests if expression is a Function, CompiledFunction \
or InterpolatingFunction.\>\""}], "\n", "\t", "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Adopted", " ", "from", " ", 
     RowBox[{"http", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"stackoverflow", ".", "com"}], "/", "questions"}], "/", 
       "3736942"}], "/", "test"}], "-", "if", "-", "an", "-", "expression", 
     "-", "is", "-", "a", "-", "function"}]}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"FunctionQ", "[", 
   RowBox[{
   "_Function", "|", "_InterpolatingFunction", "|", "_CompiledFunction"}], 
   "]"}], "=", "True"}], "\n", 
 RowBox[{
  RowBox[{"FunctionQ", "[", "f_Symbol", "]"}], ":=", 
  RowBox[{"Or", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"DownValues", "[", "f", "]"}], "=!=", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Attributes", "[", "f", "]"}], ",", "NumericFunction"}], 
     "]"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"FunctionQ", "[", "_", "]"}], "=", "False"}]}], "Code",
 CellChangeTimes->{{3.7339904263153253`*^9, 3.7339905700259266`*^9}, {
  3.7339906088478365`*^9, 3.733990611067322*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Tests", " ", "if", " ", "the", " ", "argument", " ", "is", " ", "a", " ", 
    "vector", " ", "or", " ", "array", " ", "of", " ", "numbers"}], "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"NumericVectorQ", "[", "expr_", "]"}], ":=", 
    RowBox[{"VectorQ", "[", 
     RowBox[{"expr", ",", "NumericQ"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"NumericArrayQ", "[", "expr_", "]"}], ":=", 
    RowBox[{"ArrayQ", "[", 
     RowBox[{"expr", ",", "_", ",", "NumericQ"}], "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.733990657086379*^9, 3.7339906583800373`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"notOptPatt", "::", "usage"}], "=", 
   "\"\<Except[_?OptionQ]\n\tA pattern to test if the expression is NOT an \
option. \n\tTypical usage is to define optional arguments in functions, which \
at the same time can accept options. \n\nExample:\n\tDefinition of function \
with an optional argument y having the default value of 1 and at the same \
time an option Option1 with default value 2\t\n\tf[x_, y:notOptPatt:1, \
OptionsPattern[{Option1->2}]]:=\!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+y+OptionValue[Option1]\>\""}], "\n"}], "\n", 
 RowBox[{"notOptPatt", "=", 
  RowBox[{"Except", "[", 
   RowBox[{"_", "?", "OptionQ"}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.733990667517043*^9, 3.7339906856915627`*^9}, {
   3.7339907410041885`*^9, 3.7339909168407345`*^9}, {3.7339909586262817`*^9, 
   3.7339910228491125`*^9}, {3.7339910647788143`*^9, 3.73399113653504*^9}, {
   3.7339944451158495`*^9, 3.7339944456510053`*^9}, 3.7339948728148193`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "differentiate", " ", "between", " ", "2", "D", " ", "and", " ", "3", "D", 
    " ", "datasets"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"XYListQ", "::", "usage"}], "=", 
    "\"\<XYListQ[list_], XYListQ[list_,d_]\n\tTest if list is a xylist of \
dimension d, d=1 if omitted.\>\""}], "\n", "\t", "\n", 
   RowBox[{
    RowBox[{"XYListQ", "[", "list_", "]"}], ":=", 
    RowBox[{
     RowBox[{"ArrayQ", "[", 
      RowBox[{"list", ",", "2"}], "]"}], "&&", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"Dimensions", "[", "list", "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "==", "2"}], ")"}]}]}], "\n", 
   RowBox[{
    RowBox[{"XYListQ", "[", 
     RowBox[{"list_", ",", "d_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"ListQ", "[", "list", "]"}], "&&", " ", 
     RowBox[{"AllTrue", "[", 
      RowBox[{"list", ",", "XYListQ", ",", 
       RowBox[{"d", "-", "1"}]}], "]"}]}]}]}]}]], "Code",
 CellChangeTimes->{
  3.733991245908392*^9, {3.733991349818822*^9, 3.733991436748381*^9}, {
   3.7339944748207164`*^9, 3.733994563490768*^9}, 3.7339946265227027`*^9, {
   3.7339947286188965`*^9, 3.7339947307454023`*^9}, {3.7339949139841447`*^9, 
   3.733994922983019*^9}, {3.7339951583685727`*^9, 3.7339951585280437`*^9}, {
   3.733995242549082*^9, 3.733995324444669*^9}, {3.7339956822302866`*^9, 
   3.7339957009205127`*^9}, {3.733995807619132*^9, 3.7339958327256675`*^9}, 
   3.7339966852784204`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"XYZListQ", "::", "usage"}], "=", 
   "\"\<XYZListQ[list_], XYZListQ[list_,d_]\n\tTest if list is and xyzlist of \
the dimension d, d=1 if omitted.\>\""}], "\n", "\t"}], "\n", 
 RowBox[{
  RowBox[{"XYZListQ", "[", "list_", "]"}], ":=", 
  RowBox[{
   RowBox[{"ArrayQ", "[", 
    RowBox[{"list", ",", "2"}], "]"}], "&&", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Dimensions", "[", "list", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}], "==", "3"}], ")"}]}]}], "\n", 
 RowBox[{
  RowBox[{"XYZListQ", "[", 
   RowBox[{"list_", ",", "d_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"ListQ", "[", "list", "]"}], "&&", " ", 
   RowBox[{"AllTrue", "[", 
    RowBox[{"list", ",", "XYZListQ", ",", 
     RowBox[{"d", "-", "1"}]}], "]"}]}]}]}], "Code",
 InitializationCell->True,
 CellChangeTimes->{{3.733995736898099*^9, 3.7339957475509605`*^9}, {
   3.7339957784190626`*^9, 3.7339957861832943`*^9}, 3.7339958564219456`*^9, 
   3.7339966865387115`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"InRangeQ", "::", "usage"}], "=", 
   "\"\<InRangeQ[x_, range_, IncludeBoundary\[Rule]True]\n\tCheck if x_ \
belongs to the interval range_={\!\(\*SubscriptBox[\(x\), \(min\)]\), \
\!\(\*SubscriptBox[\(x\), \(max\)]\)}.\n\nOptions:\n\t\
IncludeBoundary\[Rule]True - regulate if the boundary points are included in \
the interval. \n\tThe option can be a single logical value or a list of 2 \
logical values (e.g. {True,False}), related to the low and high boundary \
correspondingly.\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "InRangeQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"IncludeBoundary", "\[Rule]", "True"}], "}"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Privite`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InRangeQ", "[", 
     RowBox[{"x_", ",", "range_", ",", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", "InRangeQ", "}"}], "]"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"upCompFunc", ",", "lowCompFunc", ",", "ibOpt"}], "}"}], ",", 
      "\n", "\t", 
      RowBox[{
       RowBox[{"ibOpt", "=", 
        RowBox[{"OptionValue", "[", "IncludeBoundary", "]"}]}], ";", "\n", 
       "\t", 
       RowBox[{"Which", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "ibOpt", "]"}], "===", "Symbol"}], ",", "\n", 
         "\t\t", 
         RowBox[{
          RowBox[{"lowCompFunc", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"ibOpt", "===", "True"}], ",", "GreaterEqual", ",", 
             "Greater"}], "]"}]}], ";", "\n", "\t\t", 
          RowBox[{"upCompFunc", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"ibOpt", "===", "True"}], ",", "LessEqual", ",", 
             "Less"}], "]"}]}], ";"}], "\n", "\t", ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"Head", "[", "ibOpt", "]"}], "===", "List"}], ",", "\n", 
         "\t\t", 
         RowBox[{
          RowBox[{"lowCompFunc", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ibOpt", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "===", "True"}], ",", 
             "GreaterEqual", ",", "Greater"}], "]"}]}], ";", "\n", "\t\t", 
          RowBox[{"upCompFunc", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ibOpt", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "===", "True"}], ",", 
             "LessEqual", ",", "Less"}], "]"}]}], ";"}]}], "\n", "\t", "]"}], 
       ";", "\n", "\t", 
       RowBox[{
        RowBox[{"lowCompFunc", "[", 
         RowBox[{"x", ",", 
          RowBox[{"range", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&&", 
        RowBox[{"upCompFunc", "[", 
         RowBox[{"x", ",", 
          RowBox[{"range", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}]}], "\n", "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.7345475350108614`*^9, 3.734547732803196*^9}, {
  3.7345477632606993`*^9, 3.734547822165815*^9}, {3.737779262075577*^9, 
  3.737779278980308*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulations with xy- and xyz- lists", "Section",
 CellChangeTimes->{{3.7339959576736984`*^9, 3.7339959724799905`*^9}}],

Cell[CellGroupData[{

Cell["Mapping over specific dimension", "Subsection",
 CellChangeTimes->{{3.733998804516633*^9, 3.7339988140165777`*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
    "Useful", " ", "functions", " ", "adopted", " ", "with", " ", "slight", 
     " ", "extension", " ", "from", " ", "the", " ", 
     RowBox[{"V", ".", 
      RowBox[{"Sudhir", "'"}]}], "s", " ", "He3Analysis", " ", "package"}], 
    ";", "\n", 
    RowBox[{
     RowBox[{"The", " ", "function", " ", "names", " ", "are", " ", "self"}], 
     "-", "explanatory"}]}], ",", " ", 
   RowBox[{
   "the", " ", "two", " ", "instances", " ", "are", " ", "different", " ", 
    "in", " ", "the", " ", "argument", " ", 
    RowBox[{"type", "."}]}]}], "*)"}]], "Code"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MapX", "::", "usage"}], "=", 
  "\"\<MapX[f_,list_] applies function f to X elements in xy- or xyz- \
list\>\""}], "\n", 
 RowBox[{
  RowBox[{"MapX", "[", 
   RowBox[{"f_", ",", 
    RowBox[{"list_", "?", "XYListQ"}]}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", "list"}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MapX", "[", 
    RowBox[{"f_", ",", 
     RowBox[{"list_", "?", "XYZListQ"}]}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], "}"}], "&"}], ",", "list"}], 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"MapY", "::", "usage"}], "=", 
  "\"\<MapY[f_,list_] applies function f to Y elements in xy- or xyz- \
list\>\""}], "\n", 
 RowBox[{
  RowBox[{"MapY", "[", 
   RowBox[{"f_", ",", 
    RowBox[{"list_", "?", "XYListQ"}]}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", "list"}],
    "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MapY", "[", 
    RowBox[{"f_", ",", 
     RowBox[{"list_", "?", "XYZListQ"}]}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"f", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", "list"}], 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"MapXY", "::", "usage"}], "=", 
  "\"\<MapX[fx_,fy_,list_] applies functions fx and fy correspondingly to X \
and Y elements in xy- or xyz- list\>\""}], "\n", 
 RowBox[{
  RowBox[{"MapXY", "[", 
   RowBox[{"fx_", ",", "fy_", ",", 
    RowBox[{"list_", "?", "XYListQ"}]}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"fx", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
       RowBox[{"fy", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", "list"}],
    "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MapXY", "[", 
    RowBox[{"fx_", ",", "fy_", ",", 
     RowBox[{"list_", "?", "XYZListQ"}]}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"fx", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
        RowBox[{"fy", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], "}"}], "&"}], ",", "list"}], 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"MapZ", "::", "usage"}], "=", 
  "\"\<MapZ[f_,list_] applies function f to Z elements in xyzlist\>\""}], "\n\
", 
 RowBox[{
  RowBox[{"MapZ", "[", 
   RowBox[{"f_", ",", "xyzlist_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
    "xyzlist"}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.733995983435758*^9, 3.733996047818942*^9}, {
  3.7339960862113943`*^9, 3.733996313181395*^9}, {3.733996700815343*^9, 
  3.7339967284947357`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Rescaling xylist along x and y axes ", "Subsection",
 CellChangeTimes->{{3.733997106814396*^9, 3.733997136773698*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ScaleY", "::", "usage"}], "=", 
   "\"\<ScaleX[list_,a_], ScaleY[list_,a_], ShiftX[list_,a_], \
ShiftY[list_,a_]\n\trescale or offset data along the x and y coordinates by \
the amount a_\n\tEach of the function names can be used as an option in \
another. E.g. simultaneus shift along x axis by a and rescaling along \n\ty \
by b can be equivalently written as ScaleY[list,b,ShiftX\[Rule]a] or \
ShiftX[list,b,ScaleY\[Rule]a].\n\nInput:\n\tlist_ is either xylist or \
xylistd2. a is a constant if list_ is xylist or if list_ is xylistd2, can be \
a vector of constants\n\tfor each element in xylistd2. Specifically for \
ShiftY, a_ can be a xylist or a list of xylists, in which case the y-values \n\
\tof this xylist are added to the y- values of list_.\n\nOutput: \n\t\
{{x,y},...}\[Rule]{{ScaleX\[Times](x+ShiftX),ScaleY\[Times](y+ShiftY)},...}\>\
\""}], "\n", "\t"}], "\n", 
 RowBox[{
  RowBox[{"ScaleX", "::", "usage"}], "=", 
  RowBox[{"ScaleY", "::", "usage"}]}], "\n", 
 RowBox[{
  RowBox[{"ShiftY", "::", "usage"}], "=", 
  RowBox[{"ScaleY", "::", "usage"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ShiftX", "::", "usage"}], "=", 
   RowBox[{"ScaleY", "::", "usage"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SSXY", "::", "usage"}], "=", 
    "\"\<SSXY[list_,xSc_,ySc_,xSh_,ySh_] low level generic rescaling function \
used by ScaleY, ScaleX, ShiftY and ShiftX\>\""}], ";"}], "\n", "\n", 
  RowBox[{"(*", 
   RowBox[{"Versions", " ", "for", " ", "various", " ", "inputs"}], "*)"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n", 
  "\t\t\t\t\t\t\t\t"}], "\n", 
 RowBox[{
  RowBox[{"SSXY", "[", 
   RowBox[{
    RowBox[{"xylist_", "?", "XYListQ"}], ",", "xSc_", ",", "ySc_", ",", 
    "xSh_", ",", "ySh_"}], "]"}], ":=", 
  RowBox[{"Which", "[", "\n", "\t", 
   RowBox[{
    RowBox[{
     RowBox[{"XYListQ", "[", "ySh", "]"}], "&&", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Length", "[", "ySh", "]"}], "==", 
       RowBox[{"Length", "[", "xylist", "]"}]}], ")"}]}], ",", "\n", "\t\t", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"xSc", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"xylist", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "1"}], "]"}], "]"}], "+", "xSh"}], ")"}]}], 
       ",", 
       RowBox[{"ySc", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"xylist", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "2"}], "]"}], "]"}], "+", 
          RowBox[{"ySh", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "2"}], "]"}], "]"}]}], ")"}]}]}], "}"}], "]"}],
     ",", "\n", "\t", "True", ",", "\n", "\t\t", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"xSc", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"xylist", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "1"}], "]"}], "]"}], "+", "xSh"}], ")"}]}], 
       ",", 
       RowBox[{"ySc", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"xylist", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "2"}], "]"}], "]"}], "+", "ySh"}], ")"}]}]}], 
      "}"}], "]"}]}], "\n", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SSXY", "[", 
    RowBox[{
     RowBox[{"list_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"XYListQ", "[", 
         RowBox[{"#", ",", "2"}], "]"}], "&"}], ")"}]}], ",", "xSc_", ",", 
     "ySc_", ",", "xSh_", ",", "ySh_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "xScListQ", ",", "yScListQ", ",", "xShListQ", ",", "yShListQ", ",", 
       "xScTmp", ",", "yScTmp", ",", "xShTmp", ",", "yShTmp"}], "}"}], ",", 
     "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{
      "Check", " ", "if", " ", "need", " ", "to", " ", "iterate", " ", "over",
        " ", "the", " ", "variables"}], "*)"}], "\n", "\t", 
     RowBox[{
      RowBox[{"xScListQ", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"VectorQ", "[", "xSc", "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "xSc", "]"}], "\[Equal]", 
           RowBox[{"Length", "[", "list", "]"}]}], ")"}]}], ")"}]}], ";", 
      "\n", "\t", 
      RowBox[{"yScListQ", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"VectorQ", "[", "ySc", "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "ySc", "]"}], "\[Equal]", 
           RowBox[{"Length", "[", "list", "]"}]}], ")"}]}], ")"}]}], ";", 
      "\n", "\t", 
      RowBox[{"xShListQ", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"VectorQ", "[", "xSh", "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "xSh", "]"}], "\[Equal]", 
           RowBox[{"Length", "[", "list", "]"}]}], ")"}]}], ")"}]}], ";", 
      "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{
       "The", " ", "case", " ", "of", " ", "shift", " ", "in", " ", "y", " ", 
        "direction", " ", "is", " ", "special", " ", "as", " ", "here", " ", 
        "multiple", " ", "xylists", " ", "can", " ", "be", " ", "supplied"}], 
       "*)"}], "\n", "\t", 
      RowBox[{"yShListQ", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"VectorQ", "[", "ySh", "]"}], "||", 
           RowBox[{"XYListQ", "[", 
            RowBox[{"ySh", ",", "2"}], "]"}]}], ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "ySh", "]"}], "\[Equal]", 
           RowBox[{"Length", "[", "list", "]"}]}], ")"}]}], ")"}]}], ";", 
      "\t", "\n", "\t", 
      RowBox[{"Table", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"xScTmp", "=", 
          RowBox[{"If", "[", 
           RowBox[{"xScListQ", ",", " ", 
            RowBox[{"xSc", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", "xSc"}], "]"}]}], ";", 
         "\n", "\t\t", 
         RowBox[{"yScTmp", "=", 
          RowBox[{"If", "[", 
           RowBox[{"yScListQ", ",", " ", 
            RowBox[{"ySc", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", "ySc"}], "]"}]}], ";", 
         "\n", "\t\t", 
         RowBox[{"xShTmp", "=", 
          RowBox[{"If", "[", 
           RowBox[{"xShListQ", ",", " ", 
            RowBox[{"xSh", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", "xSh"}], "]"}]}], ";", 
         "\n", "\t\t", 
         RowBox[{"yShTmp", "=", 
          RowBox[{"If", "[", 
           RowBox[{"yShListQ", ",", " ", 
            RowBox[{"ySh", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", "ySh"}], "]"}]}], ";", 
         "\n", "\t\t", 
         RowBox[{"SSXY", "[", 
          RowBox[{
           RowBox[{"list", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "xScTmp", ",", "yScTmp", ",",
            "xShTmp", ",", "yShTmp"}], "]"}]}], "\n", "\t\t", ",", "\n", 
        "\t\t", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "list", "]"}]}], "}"}]}], "\n", "\t", "]"}], 
      ";"}]}], "\n", "]"}]}], "\n", "\t\t"}], "\n", 
 RowBox[{
  RowBox[{"ScaleY", "[", 
   RowBox[{"list_", ",", " ", 
    RowBox[{"a", ":", 
     RowBox[{"Except", "[", 
      RowBox[{"_", "?", "OptionQ"}], "]"}], ":", "1"}], ",", " ", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ScaleX", "->", "1"}], ",", 
       RowBox[{"ShiftX", "->", "0"}], ",", 
       RowBox[{"ShiftY", "->", "0"}]}], "}"}], "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], "}"}], ",", "\n", 
    "\t", 
    RowBox[{
     RowBox[{"xSc", "=", 
      RowBox[{"OptionValue", "[", "ScaleX", "]"}]}], ";", "\n", "\t", 
     RowBox[{"ySc", "=", "a"}], ";", "\n", "\t", 
     RowBox[{"xSh", "=", 
      RowBox[{"OptionValue", "[", "ShiftX", "]"}]}], ";", "\n", "\t", 
     RowBox[{"ySh", "=", 
      RowBox[{"OptionValue", "[", "ShiftY", "]"}]}], ";", "\t", "\n", "\t", 
     RowBox[{"SSXY", "[", 
      RowBox[{"list", ",", "xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], 
      "]"}]}]}], "\n", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"ScaleX", "[", 
   RowBox[{"list_", ",", " ", 
    RowBox[{"a", ":", 
     RowBox[{"Except", "[", 
      RowBox[{"_", "?", "OptionQ"}], "]"}], ":", "1"}], ",", " ", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ScaleY", "->", "1"}], ",", 
       RowBox[{"ShiftX", "->", "0"}], ",", 
       RowBox[{"ShiftY", "->", "0"}]}], "}"}], "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], "}"}], ",", "\n", 
    "\t", 
    RowBox[{
     RowBox[{"xSc", "=", "a"}], ";", "\n", "\t", 
     RowBox[{"ySc", "=", 
      RowBox[{"OptionValue", "[", "ScaleY", "]"}]}], ";", "\n", "\t", 
     RowBox[{"xSh", "=", 
      RowBox[{"OptionValue", "[", "ShiftX", "]"}]}], ";", "\n", "\t", 
     RowBox[{"ySh", "=", 
      RowBox[{"OptionValue", "[", "ShiftY", "]"}]}], ";", "\t", "\n", "\t", 
     RowBox[{"SSXY", "[", 
      RowBox[{"list", ",", "xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], 
      "]"}]}]}], "\n", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"ShiftY", "[", 
   RowBox[{"list_", ",", " ", 
    RowBox[{"a", ":", 
     RowBox[{"Except", "[", 
      RowBox[{"_", "?", "OptionQ"}], "]"}], ":", "0"}], ",", " ", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ScaleX", "->", "1"}], ",", 
       RowBox[{"ScaleY", "->", "1"}], ",", 
       RowBox[{"ShiftX", "->", "0"}]}], "}"}], "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], "}"}], ",", "\n", 
    "\t", 
    RowBox[{
     RowBox[{"xSc", "=", 
      RowBox[{"OptionValue", "[", "ScaleX", "]"}]}], ";", "\n", "\t", 
     RowBox[{"ySc", "=", 
      RowBox[{"OptionValue", "[", "ScaleY", "]"}]}], ";", "\n", "\t", 
     RowBox[{"xSh", "=", 
      RowBox[{"OptionValue", "[", "ShiftX", "]"}]}], ";", "\n", "\t", 
     RowBox[{"ySh", "=", "a"}], ";", "\t", "\n", "\t", 
     RowBox[{"SSXY", "[", 
      RowBox[{"list", ",", "xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], 
      "]"}]}]}], "\n", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ShiftX", "[", 
    RowBox[{
     RowBox[{"list_", "?", "XYListQ"}], ",", " ", 
     RowBox[{"a", ":", 
      RowBox[{"Except", "[", 
       RowBox[{"_", "?", "OptionQ"}], "]"}], ":", "0"}], ",", " ", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ScaleX", "->", "1"}], ",", 
        RowBox[{"ScaleY", "\[Rule]", "1"}], ",", 
        RowBox[{"ShiftY", "->", "0"}]}], "}"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], "}"}], ",", "\n", 
     "\t", 
     RowBox[{
      RowBox[{"xSc", "=", 
       RowBox[{"OptionValue", "[", "ScaleX", "]"}]}], ";", "\n", "\t", 
      RowBox[{"ySc", "=", 
       RowBox[{"OptionValue", "[", "ScaleY", "]"}]}], ";", "\n", "\t", 
      RowBox[{"xSh", "=", "a"}], ";", "\n", "\t", 
      RowBox[{"ySh", "=", 
       RowBox[{"OptionValue", "[", "ShiftY", "]"}]}], ";", "\t", "\n", "\t", 
      RowBox[{"SSXY", "[", 
       RowBox[{"list", ",", "xSc", ",", "ySc", ",", "xSh", ",", "ySh"}], 
       "]"}]}]}], "\n", "]"}]}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.7339971759379606`*^9, 3.7339972503603563`*^9}, {
   3.7339974571205206`*^9, 3.733997484379327*^9}, {3.733997594952799*^9, 
   3.73399776058792*^9}, {3.7339978324248095`*^9, 3.7339978325408993`*^9}, {
   3.7339980942059655`*^9, 3.7339981040226226`*^9}, {3.7339981571957717`*^9, 
   3.7339982746373596`*^9}, {3.733998382574481*^9, 3.733998543089834*^9}, {
   3.733998617852439*^9, 3.7339986229858503`*^9}, {3.7340088877683067`*^9, 
   3.7340089075074434`*^9}, {3.7340115073803797`*^9, 
   3.7340115879801683`*^9}, {3.7345264726613045`*^9, 
   3.7345265051490574`*^9}, {3.7345270423646903`*^9, 3.734527052570977*^9}, {
   3.7345271923840046`*^9, 3.7345272304906006`*^9}, {3.7345281683698006`*^9, 
   3.7345282234205494`*^9}, {3.7345282657791405`*^9, 3.734528393158646*^9}, {
   3.734528658543537*^9, 3.7345286658670826`*^9}, {3.7345287263503513`*^9, 
   3.7345287433842964`*^9}, {3.7345287899201393`*^9, 3.734528830305402*^9}, {
   3.734528900190734*^9, 3.7345289613435116`*^9}, {3.734529045966034*^9, 
   3.7345292418905516`*^9}, {3.7345292777513237`*^9, 
   3.7345293111153297`*^9}, {3.734529365229581*^9, 3.73452939550165*^9}, {
   3.7345294448269434`*^9, 3.734529462813036*^9}, {3.7345294986825047`*^9, 
   3.734529801146751*^9}, {3.734529838662196*^9, 3.734529852926813*^9}, {
   3.7345298883824415`*^9, 3.73452989190657*^9}, {3.734530017983759*^9, 
   3.73453001828413*^9}, {3.7345300494361753`*^9, 3.734530170769124*^9}, {
   3.734530550174871*^9, 3.7345308711165*^9}, {3.7345310160118074`*^9, 
   3.7345313705466375`*^9}, {3.737777037758816*^9, 3.7377770756969323`*^9}, {
   3.7377788593619275`*^9, 3.7377788741560555`*^9}, 3.737778955563093*^9, {
   3.7377790283216295`*^9, 3.7377790289214444`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Averaging and normalization", "Subsection",
 CellChangeTimes->{{3.734590449245929*^9, 3.7345904497821093`*^9}, {
  3.7345935578445897`*^9, 3.7345935643253946`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NormalizeY", "::", "usage"}], "=", 
   "\"\<NormalizeY[xylist_]\n\tFunction accepts 2D array of data (xylist) and \
rescales it along Y coordinate to within [0,1]\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Privite`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NormalizeY", "[", "list_", "]"}], ":=", "\n", "\t", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ymin", ",", "ymax"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"ymin", "=", 
        RowBox[{"Min", "[", 
         RowBox[{"list", "[", 
          RowBox[{"[", 
           RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}]}], ";", "\n", "\t", 
       RowBox[{"ymax", "=", 
        RowBox[{"Max", "[", 
         RowBox[{"list", "[", 
          RowBox[{"[", 
           RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}]}], ";", "\n", "\t", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"list", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"list", "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "2"}], "]"}], "]"}], "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ymax", "+", "ymin"}], ")"}], "/", "2"}]}], ")"}], " ", 
           RowBox[{"2", "/", 
            RowBox[{"(", 
             RowBox[{"ymax", "-", "ymin"}], ")"}]}]}]}], "}"}], "]"}]}]}], 
     "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.7345905620927925`*^9, 3.734590563503581*^9}, 
   3.7345935734235616`*^9, {3.737779340207268*^9, 3.737779347292903*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Average", "::", "usage"}], "=", 
   "\"\<Average[list_, nAvg_]\n\tFunction calculates moving average of the \
list and does a corresponding decimation of the list.\n\tThe output thus \
consists of averages over successive intervals of nAvg elements. \n\tThe \
X-values for each of the averaging intervals are taken close to the centers \
of the interval\[IndentingNewLine]\n\tlist_ can be\n\t1. a 1D list\n\t2. a \
xylist\n\t3. a xylistd2\>\""}], "\n", "\t"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Average", "[", 
    RowBox[{"list_", ",", "nAvg_"}], "]"}], ":=", 
   RowBox[{"Which", "[", "\n", "\t", 
    RowBox[{
     RowBox[{
      RowBox[{"Depth", "[", "list", "]"}], "==", "2"}], ",", " ", "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{"single", " ", "1", "D", " ", "list", " ", "input"}], "*)"}], 
     "\n", "\t", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"MovingAverage", "[", 
        RowBox[{"list", ",", "nAvg"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}], ",", "nAvg"}], "}"}]}], "]"}], "\n", "\t", ",", 
     "\n", "\t", 
     RowBox[{
      RowBox[{"Depth", "[", "list", "]"}], "==", "3"}], ",", " ", "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{"single", " ", "XY", " ", "trace", " ", "input"}], "*)"}], "\n",
      "\t", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"list", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{
              RowBox[{"Ceiling", "[", 
               RowBox[{"nAvg", "/", "2"}], "]"}], ";;", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Floor", "[", 
                 RowBox[{"nAvg", "/", "2"}], "]"}]}], "-", "1"}]}], ",", 
             "1"}], "]"}], "]"}], ",", 
          RowBox[{"MovingAverage", "[", 
           RowBox[{
            RowBox[{"list", "[", 
             RowBox[{"[", 
              RowBox[{";;", ",", "2"}], "]"}], "]"}], ",", "nAvg"}], "]"}]}], 
         "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}], ",", "nAvg"}], "}"}]}], "]"}], "\n", "\t", ",", 
     "\n", "\t", 
     RowBox[{
      RowBox[{"Depth", "[", "list", "]"}], "==", "4"}], ",", " ", "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{
      "list", " ", "of", " ", "XY", " ", "traces", " ", "as", " ", "input"}], 
      "*)"}], "\n", "\t", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{
                RowBox[{"Ceiling", "[", 
                 RowBox[{"nAvg", "/", "2"}], "]"}], ";;", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"Floor", "[", 
                   RowBox[{"nAvg", "/", "2"}], "]"}]}], "-", "1"}]}], ",", 
               "1"}], "]"}], "]"}], ",", 
            RowBox[{"MovingAverage", "[", 
             RowBox[{
              RowBox[{"x", "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "2"}], "]"}], "]"}], ",", "nAvg"}], 
             "]"}]}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}], ",", "nAvg"}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "list"}], "}"}]}], "]"}]}], "\n", "]"}]}], 
  "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.734590538225938*^9, 3.7345905472177286`*^9}, {
   3.7345937264864874`*^9, 3.7345937298761635`*^9}, {3.7377785722172394`*^9, 
   3.737778580195632*^9}, 3.737779354882929*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GaussianAverage", "::", "usage"}], "=", 
   "\"\<GaussianAverage[list_, nAvg_]\n\tFunction calculates the Gaussian \
filtered signal. The output thus consists of averages over successive \
intervals of nAvg elements.\n\nInput:\n\tlist_ can be\n\t1. a 1D list\n\t2. a \
xylist\n\t3. a xylistd2\n\tIn the latter two cases an appropriate the \
X-values for each of the averaging intervals are taken close to the centers \
of the interval\>\""}], "\n", "\t"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GaussianAverage", "[", 
    RowBox[{"list_", ",", "nAvg_"}], "]"}], ":=", "\n", 
   RowBox[{"Which", "[", "\n", "\t", 
    RowBox[{
     RowBox[{
      RowBox[{"Depth", "[", "list", "]"}], "==", "2"}], ",", " ", "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{"single", " ", "1", "D", " ", "list", " ", "input"}], "*)"}], 
     "\n", "\t", 
     RowBox[{"GaussianFilter", "[", 
      RowBox[{"list", ",", "nAvg"}], "]"}], "\n", "\t", ",", "\n", "\t", 
     RowBox[{
      RowBox[{"Depth", "[", "list", "]"}], "==", "3"}], ",", " ", "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{"single", " ", "XY", " ", "trace", " ", "input"}], "*)"}], "\n",
      "\t", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"list", "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"GaussianFilter", "[", 
         RowBox[{
          RowBox[{"list", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "2"}], "]"}], "]"}], ",", "nAvg"}], "]"}]}], 
       "}"}], "]"}], "\n", "\t", ",", "\n", "\t", 
     RowBox[{
      RowBox[{"Depth", "[", "list", "]"}], "==", "4"}], ",", " ", "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{
      "list", " ", "of", " ", "XY", " ", "traces", " ", "as", " ", "input"}], 
      "*)"}], "\n", "\t", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"GaussianFilter", "[", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{";;", ",", "2"}], "]"}], "]"}], ",", "nAvg"}], "]"}]}], 
         "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "list"}], "}"}]}], "]"}]}], "\n", "]"}]}], 
  "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.73459058125589*^9, 3.73459058446517*^9}, {
  3.7345936355260553`*^9, 3.734593716937027*^9}, {3.737778558615197*^9, 
  3.7377785659995627`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Find peaks", "Subsection",
 CellChangeTimes->{{3.7345905013190093`*^9, 3.7345905072571735`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FindPeaksXY", "::", "usage"}], "=", 
   "\"\<FindPeaksXY[xylist_, \[Sigma]_:0, s_:0, t_:-\[Infinity]]\n\tAnalog of \
FindPeaks that acts on xylists.\n\nOutput:\n\tPeak x position and y values {{\
\!\(\*SubscriptBox[\(x\), \(peak, i\)]\), \!\(\*SubscriptBox[\(y\), \(peak, i\
\)]\)},...}\n\nOptions:\n\tThose of standard FindPeaks plus\n\tsign\[Rule]1, \
determining if look for peaks (1) or valleys (-1)\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "FindPeaksXY", "]"}], "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Options", "[", "FindPeaks", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"sign", "\[Rule]", "1"}], "}"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Privite`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FindPeaksXY", "[", 
     RowBox[{"xylist_", ",", 
      RowBox[{"\[Sigma]", ":", 
       RowBox[{"Except", "[", 
        RowBox[{"_", "?", "OptionQ"}], "]"}], ":", "0"}], ",", 
      RowBox[{"s", ":", 
       RowBox[{"Except", "[", 
        RowBox[{"_", "?", "OptionQ"}], "]"}], ":", "0"}], ",", 
      RowBox[{"t", ":", 
       RowBox[{"Except", "[", 
        RowBox[{"_", "?", "OptionQ"}], "]"}], ":", 
       RowBox[{"-", "\[Infinity]"}]}], ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", "\n", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"peakIndexList", ",", "peakValList", ",", "xInterp"}], "}"}], 
      ",", "\n", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"peakIndexList", ",", "peakValList"}], "}"}], "=", 
        RowBox[{"Transpose", "[", 
         RowBox[{"FindPeaks", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sign", "[", 
             RowBox[{"OptionValue", "[", "sign", "]"}], "]"}], "*", 
            RowBox[{"xylist", "[", 
             RowBox[{"[", 
              RowBox[{";;", ",", "2"}], "]"}], "]"}]}], ",", "\[Sigma]", ",", 
           "s", ",", "t"}], "]"}], "]"}]}], ";", "\n", "\t", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "InterpolationOrder", " ", "is", " ", "an", " ", "option", " ", "of",
           " ", "basic", " ", "FindPeaks"}], ",", " ", 
         RowBox[{
         "so", " ", "it", " ", "also", " ", "can", " ", "be", " ", "used", 
          " ", "to", " ", "find", " ", "x", " ", "values"}]}], "*)"}], "\n", 
       "\t", 
       RowBox[{"xInterp", "=", 
        RowBox[{"Interpolation", "[", 
         RowBox[{
          RowBox[{"xylist", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"InterpolationOrder", "\[Rule]", 
           RowBox[{"OptionValue", "[", "InterpolationOrder", "]"}]}]}], 
         "]"}]}], ";", "\n", "\n", "\t", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{"xInterp", "[", "peakIndexList", "]"}], "]"}], ",", 
          "peakValList"}], "}"}], "]"}]}]}], "\n", "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.7345906005878644`*^9, 3.734590602787898*^9}, {
   3.734591152093604*^9, 3.734591165385395*^9}, {3.7345911967419157`*^9, 
   3.734591235840968*^9}, {3.7345917556463947`*^9, 3.734591875852747*^9}, {
   3.7345919083533278`*^9, 3.7345919461751776`*^9}, 3.734593741661647*^9, {
   3.734598807719303*^9, 3.734598811005452*^9}, {3.7345989746188*^9, 
   3.734599032344412*^9}, {3.7345993711855645`*^9, 3.7345994204271917`*^9}, {
   3.737778590449899*^9, 3.7377785940613394`*^9}, {3.737779365576934*^9, 
   3.737779374716672*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FindPeakCenter", "::", "usage"}], "=", 
   "\"\<FindPeakCenter[xylist_]\n\tfind x-position of the center of mass of \
xylist_ using linear data interpolation over x\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FindPeakCenter", "[", 
    RowBox[{"XYData_", ",", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"sign", "->", " ", "1"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "YIntegralList", ",", "YIntegralInterpol", ",", "iCOM", ",", "offset", 
       ",", "dim"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"dim", "=", 
       RowBox[{"Depth", "[", "XYData", "]"}]}], ";", "\n", 
      RowBox[{"Which", "[", "\n", 
       RowBox[{
        RowBox[{"dim", "==", "3"}], " ", 
        RowBox[{"(*", 
         RowBox[{"single", " ", "XY", " ", "trace"}], "*)"}], ",", "\n", 
        RowBox[{
         RowBox[{"offset", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Sign", "[", 
              RowBox[{"OptionValue", "[", "sign", "]"}], "]"}], ">=", "0"}], 
            ",", 
            RowBox[{"Min", "[", 
             RowBox[{"XYData", "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"Max", "[", 
             RowBox[{"XYData", "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}]}], "]"}]}], ";", 
         "\n", 
         RowBox[{"YIntegralList", "=", 
          RowBox[{"Accumulate", "[", 
           RowBox[{
            RowBox[{"XYData", "[", 
             RowBox[{"[", 
              RowBox[{";;", ",", "2"}], "]"}], "]"}], "-", "offset"}], 
           "]"}]}], ";", "\n", 
         RowBox[{"YIntegralInterpol", "=", 
          RowBox[{"Interpolation", "[", 
           RowBox[{
            RowBox[{"YIntegralList", "/", 
             RowBox[{"YIntegralList", "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
            RowBox[{"InterpolationOrder", "->", "1"}]}], "]"}]}], ";", "\n", 
         "\n", 
         RowBox[{"(*", 
          RowBox[{
          "fractional", " ", "index", " ", "of", " ", "the", " ", "Center", 
           " ", "of", " ", "Mass"}], "*)"}], "\n", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"iCOM", "=", 
            RowBox[{"0.5", "+", 
             RowBox[{"(", 
              RowBox[{"x", "/.", 
               RowBox[{"FindRoot", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"YIntegralInterpol", "[", "x", "]"}], "==", "0.5"}],
                  ",", 
                 RowBox[{"{", 
                  RowBox[{"x", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "YIntegralList", "]"}], "/", 
                    "2"}]}], "}"}]}], "]"}]}], ")"}]}]}], ")"}], "//", 
          "Quiet"}], ";", "\n", 
         RowBox[{
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Ceiling", "[", "iCOM", "]"}], "-", 
             RowBox[{"Floor", "[", "iCOM", "]"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"XYData", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"Floor", "[", "iCOM", "]"}], ",", "1"}], "]"}], "]"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Ceiling", "[", "iCOM", "]"}], "-", "iCOM"}], ")"}]}], 
            "+", 
            RowBox[{
             RowBox[{"XYData", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"Ceiling", "[", "iCOM", "]"}], ",", "1"}], "]"}], 
              "]"}], 
             RowBox[{"(", 
              RowBox[{"iCOM", "-", 
               RowBox[{"Floor", "[", "iCOM", "]"}]}], ")"}]}]}], ")"}]}]}], 
        "\n", "\n", ",", "\n", 
        RowBox[{"dim", "==", "4"}], " ", 
        RowBox[{"(*", 
         RowBox[{"list", " ", "of", " ", "XY", " ", "traces"}], "*)"}], ",", 
        "\n", 
        RowBox[{"Table", "[", "\n", 
         RowBox[{
          RowBox[{
           RowBox[{"offset", "=", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sign", "[", 
                RowBox[{"OptionValue", "[", "sign", "]"}], "]"}], ">=", "0"}],
               ",", 
              RowBox[{"Min", "[", 
               RowBox[{"y", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"Max", "[", 
               RowBox[{"y", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}]}], "]"}]}], 
           ";", "\n", 
           RowBox[{"YIntegralList", "=", 
            RowBox[{"Accumulate", "[", 
             RowBox[{
              RowBox[{"y", "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "2"}], "]"}], "]"}], "-", "offset"}], 
             "]"}]}], ";", "\n", 
           RowBox[{"YIntegralInterpol", "=", 
            RowBox[{"Interpolation", "[", 
             RowBox[{
              RowBox[{"YIntegralList", "/", 
               RowBox[{"YIntegralList", "[", 
                RowBox[{"[", 
                 RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
              RowBox[{"InterpolationOrder", "->", "1"}]}], "]"}]}], ";", "\n",
            "\n", 
           RowBox[{"(*", 
            RowBox[{
            "fractional", " ", "index", " ", "of", " ", "the", " ", "Center", 
             " ", "of", " ", "Mass"}], "*)"}], "\n", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"iCOM", "=", 
              RowBox[{"0.5", "+", 
               RowBox[{"(", 
                RowBox[{"x", "/.", 
                 RowBox[{"FindRoot", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"YIntegralInterpol", "[", "x", "]"}], "==", 
                    "0.5"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "YIntegralList", "]"}], "/", 
                    "2"}]}], "}"}]}], "]"}]}], ")"}]}]}], ")"}], "//", 
            "Quiet"}], ";", "\n", 
           RowBox[{
            RowBox[{"1", "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Ceiling", "[", "iCOM", "]"}], "-", 
               RowBox[{"Floor", "[", "iCOM", "]"}]}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"y", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"Floor", "[", "iCOM", "]"}], ",", "1"}], "]"}], 
                "]"}], 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Ceiling", "[", "iCOM", "]"}], "-", "iCOM"}], 
                ")"}]}], "+", 
              RowBox[{
               RowBox[{"y", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"Ceiling", "[", "iCOM", "]"}], ",", "1"}], "]"}], 
                "]"}], 
               RowBox[{"(", 
                RowBox[{"iCOM", "-", 
                 RowBox[{"Floor", "[", "iCOM", "]"}]}], ")"}]}]}], ")"}]}]}], 
          "\n", ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", "XYData"}], "}"}]}], "]"}]}], "\n", "]"}]}]}], 
    "\n", "]"}]}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.73459062376963*^9, 3.7345906263393307`*^9}, {
  3.734600618874716*^9, 3.73460065928522*^9}, {3.7377768552476034`*^9, 
  3.7377768768528147`*^9}, {3.7377771448419437`*^9, 3.73777714834396*^9}, {
  3.7377772697897663`*^9, 3.737777272274147*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulations with intervals", "Section",
 CellChangeTimes->{{3.733996468389759*^9, 3.733996474081539*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"From", " ", 
    RowBox[{"http", ":"}]}], "//", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
       "questions"}], "/", "11345"}], "/", "can"}], "-", "mathematica", "-", 
    "handle", "-", "open", "-", "intervals", "-", "interval", "-", 
    "complements"}]}], "*)"}]], "Code",
 CellChangeTimes->{3.733996525714651*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"IntervalInverse", "::", "usage"}], "=", 
   "\"\<IntervalInverse[a_] returns complement (\[Minus]\[Infinity],\
\[Infinity])/a\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"IntervalInverse", "[", 
   RowBox[{"Interval", "[", "int___", "]"}], "]"}], ":=", 
  RowBox[{"Interval", "@@", 
   RowBox[{"Partition", "[", "\n", "\t", 
    RowBox[{
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"{", "int", "}"}]}], "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "\[Infinity]"}], ",", "mid___", ",", "\[Infinity]"}], 
          "}"}], ":>", 
         RowBox[{"{", "mid", "}"}]}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "\[Infinity]"}], ",", "mid__"}], "}"}], ":>", 
         RowBox[{"{", 
          RowBox[{"mid", ",", "\[Infinity]"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"mid__", ",", "\[Infinity]"}], "}"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "\[Infinity]"}], ",", "mid"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"{", "mid___", "}"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "\[Infinity]"}], ",", "mid", ",", "\[Infinity]"}], 
          "}"}]}]}], "}"}]}], ",", "2"}], "]"}]}]}]}], "Code",
 CellChangeTimes->{{3.7339965619943337`*^9, 3.7339965913223963`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"IntervalComplement", "::", "usage"}], "=", 
   "\"\<IntervalComplement[a_,b_,c_,..] returnes a\[Backslash](b\:222ac\:222a\
\[Ellipsis])\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"IntervalComplement", "[", 
   RowBox[{"a_Interval", ",", "b__Interval"}], "]"}], ":=", 
  RowBox[{"IntervalIntersection", "[", 
   RowBox[{"a", ",", 
    RowBox[{"IntervalInverse", "@", 
     RowBox[{"IntervalUnion", "[", "b", "]"}]}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.733996540845982*^9, 3.7339965487865243`*^9}, {
  3.733996609586728*^9, 3.73399661666479*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Fitting", "Section",
 CellChangeTimes->{{3.7339177915338836`*^9, 3.7339177947598133`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FindLogFit", "::", "usage"}], "=", 
   "\"\<FindLogFit[data_, expr_, rest__]. The function is equivalent to \
FindFit, but minimizes error on log Y scale.\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"FindLogFit", "[", 
   RowBox[{"data_", ",", "expr_", ",", "rest__"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "logData", "}"}], ",", "\n", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "The", " ", "function", " ", "is", " ", "equivalent", " ", "to", " ", 
       "FindFit"}], ",", " ", 
      RowBox[{
      "but", " ", "works", " ", "in", " ", "log", " ", "Y", " ", "scale"}]}], 
     "*)"}], "\n", "\t", 
    RowBox[{
     RowBox[{"logData", "=", 
      RowBox[{"Which", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"VectorQ", "[", "data", "]"}], ",", 
        RowBox[{"Log", "[", 
         RowBox[{"Abs", "[", "data", "]"}], "]"}], ",", 
        RowBox[{"(*", 
         RowBox[{"data", " ", "list"}], "*)"}], "\n", "\t\t", 
        RowBox[{"XYListQ", "[", "data", "]"}], ",", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"data", "[", 
            RowBox[{"[", 
             RowBox[{";;", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"Log", "[", 
            RowBox[{"Abs", "[", 
             RowBox[{"data", "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], "}"}], 
         "]"}], ",", " ", 
        RowBox[{"(*", 
         RowBox[{"XY", " ", "data"}], "*)"}], "\n", "\t\t", "True", ",", 
        RowBox[{"{", "}"}]}], "\n", "\t", "]"}]}], ";", "\n", "\t", 
     RowBox[{"FindFit", "[", 
      RowBox[{"logData", ",", 
       RowBox[{"Log", "[", "expr", "]"}], ",", "rest"}], "]"}]}]}], "\n", 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.733917815068692*^9, 3.733917821169559*^9}, {
  3.734534456720999*^9, 3.7345344760129175`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FitRangeSelector", "::", "usage"}], "=", 
   "\"\<FitRangeSelector[fitRanges_, traceList_]\n\tCreate an interactive \
plot to select intervals for each element in the traceList_ (presumably for \
future use in fitting)\n\nInteractive operation:\n\tLeft mouse click - set \
lower x interval boundary at current mouse cursor position\n\tRight mouse \
click - set upper x interval boundary at current mouse cursor position\n\t\n\
Output:\n\tThe list of ranges is assigned to fitRanges_\n\nOptions:\n\t\
LogYPlot\[Rule]False\n\tLogXPlot\[Rule]False\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "FitRangeSelector", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"LogYPlot", "\[Rule]", "False"}], ",", 
     RowBox[{"LogXPlot", "\[Rule]", "False"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SetAttributes", "[", 
    RowBox[{"FitRangeSelector", ",", "HoldFirst"}], "]"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Hold", " ", "attribute", " ", "for", " ", "the", " ", "\"\<fitRanges\>\"",
     " ", "variable", " ", "is", " ", "needed", " ", "for", " ", "being", " ",
     "able", " ", "to", " ", "clear", " ", "the", " ", "variable", " ", "if", 
    " ", "it", " ", "was", " ", "already", " ", "defined"}], "*)"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRangeSelector", "[", 
    RowBox[{"fitRanges_", ",", "traceList_", ",", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", "FitRangeSelector", "}"}], "]"}]}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "epList", ",", " ", "LowerLine", ",", "UpperLine", ",", "minList", ",", 
       "maxList", ",", "plotF"}], "}"}], ",", "\n", "\t", 
     RowBox[{"(*", 
      RowBox[{"right", " ", "and", " ", "left", " ", "cursor", " ", "lines"}],
       "*)"}], "\n", "\t", 
     RowBox[{
      RowBox[{"minList", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{"tr", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"tr", ",", "traceList"}], "}"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"maxList", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"tr", "[", 
           RowBox[{"[", 
            RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"tr", ",", "traceList"}], "}"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"LowerLine", "[", 
        RowBox[{"i_", ",", "x_"}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"CMYKColor", "[", 
          RowBox[{"1.", ",", "0", ",", "0", ",", ".4"}], "]"}], ",", 
         RowBox[{"Line", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"2", 
               RowBox[{"minList", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"2", 
               RowBox[{"maxList", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}]}], "}"}], "]"}]}], 
        "}"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"UpperLine", "[", 
        RowBox[{"i_", ",", "x_"}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"CMYKColor", "[", 
          RowBox[{"0.", ",", "0.2", ",", "0.5", ",", ".1"}], "]"}], ",", 
         RowBox[{"Line", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"2", 
               RowBox[{"minList", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"2", 
               RowBox[{"maxList", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}]}], "}"}], "]"}]}], 
        "}"}]}], ";", "\n", "\t", 
      RowBox[{"plotF", "=", 
       RowBox[{"Which", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"OptionValue", "[", "LogYPlot", "]"}], "&&", 
          RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ",", 
         "ListLogLogPlot", ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"OptionValue", "[", "LogYPlot", "]"}], "&&", 
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ")"}]}], ",", 
         "ListLogPlot", ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogYPlot", "]"}]}], ")"}], "&&", 
          RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ",", 
         "ListLogLinearPlot", ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogYPlot", "]"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ")"}]}], ",", 
         "ListPlot"}], "\n", "\t", "]"}]}], ";", "\n", "\n", "\t", 
      RowBox[{"(*", " ", 
       RowBox[{
       "epList", " ", "is", " ", "the", " ", "list", " ", "of", " ", 
        "cursors", " ", "to", " ", "display", " ", "the", " ", "chosen", " ", 
        "boundaries"}], "*)"}], "\n", "\t", 
      RowBox[{"epList", "=", 
       RowBox[{"Table", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"LowerLine", "[", 
            RowBox[{"i", ",", 
             RowBox[{"traceList", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1", ",", "1"}], "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"UpperLine", "[", 
            RowBox[{"i", ",", 
             RowBox[{"traceList", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", 
                RowBox[{"-", "1"}], ",", "1"}], "]"}], "]"}]}], "]"}]}], 
          "}"}], ",", "\n", "\t", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}]}], ";",
       "\n", "\t", "\n", "\t", 
      RowBox[{"Clear", "[", "fitRanges", "]"}], ";", "\n", "\t", 
      RowBox[{"fitRanges", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}]}], ";",
       "\n", "\n", "\t", 
      RowBox[{"Manipulate", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"EventHandler", "[", 
         RowBox[{
          RowBox[{"plotF", "[", 
           RowBox[{
            RowBox[{"traceList", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"Joined", "\[Rule]", "True"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "Full"}], ",", 
            RowBox[{"Epilog", "\[Rule]", 
             RowBox[{"epList", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ",", "\n", "\t\t\t", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<MouseClicked\>\"", ",", "1"}], "}"}], ":>", 
            RowBox[{"(", "\n", "\t\t\t\t", 
             RowBox[{
              RowBox[{
               RowBox[{"fitRanges", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "1"}], "]"}], "]"}], "=", 
               RowBox[{
                RowBox[{"MousePosition", "[", "\"\<Graphics\>\"", "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "\t\t\t\t", 
              RowBox[{
               RowBox[{"epList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"LowerLine", "[", 
                  RowBox[{"i", ",", 
                   RowBox[{"fitRanges", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}]}], "]"}], ",", " ", 
                 RowBox[{"epList", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "}"}]}], ";"}], 
             "\n", "\t\t\t\t", ")"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
          "\t\t\t", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<MouseClicked\>\"", ",", "2"}], "}"}], ":>", 
            RowBox[{"(", "\n", "\t\t\t\t", 
             RowBox[{
              RowBox[{
               RowBox[{"fitRanges", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "2"}], "]"}], "]"}], "=", 
               RowBox[{
                RowBox[{"MousePosition", "[", "\"\<Graphics\>\"", "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "\t\t\t\t", 
              RowBox[{
               RowBox[{"epList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", 
               RowBox[{"{", " ", 
                RowBox[{
                 RowBox[{"epList", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"UpperLine", "[", 
                  RowBox[{"i", ",", 
                   RowBox[{"fitRanges", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "]"}]}], "}"}]}],
               ";"}], "\n", "\t\t\t\t", ")"}]}], "\n", "\t\t\t", "}"}]}], 
         "\n", "\t\t", "]"}], ",", "\n", "\t\t", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "traceList", "]"}], ",", "1"}], "}"}]}], 
       "\n", "\t", "]"}]}], ",", "\n", 
     RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.7339178387628145`*^9, 3.7339178414528418`*^9}, {
  3.7339182639670424`*^9, 3.73391826830243*^9}, {3.733918500368207*^9, 
  3.733918500792617*^9}, {3.7345335624034114`*^9, 3.734533566823221*^9}, {
  3.7345336679254*^9, 3.734533698569162*^9}, {3.7345337407899036`*^9, 
  3.734533746395157*^9}, {3.7345338025229607`*^9, 3.7345338152339487`*^9}, {
  3.734534003755744*^9, 3.7345341891978064`*^9}, {3.7345342202960467`*^9, 
  3.734534352966386*^9}, {3.734534385598068*^9, 3.7345344302903857`*^9}, {
  3.7345345061404667`*^9, 3.7345346192457333`*^9}, {3.734539821170328*^9, 
  3.734539839144967*^9}, {3.734539933051652*^9, 3.7345399382268367`*^9}, {
  3.737778618457055*^9, 3.7377786262625203`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ThreadFindFit", "::", "usage"}], "=", 
   "\"\<ThreadFindFit[traceList_,fitModel_,pars_,vars_,fitRanges_:Full]\n\t\
Function applies FindFit[] to each element in the list of 2D data traces \
traceList.\n\nInput:\n\tfitModel_, pars_ and vars_ correspond to inputs for \
FindFit[]. fitModel_ and pars_ can be either a single element, \n\tor a list \
of corresponding elements for each trace in traceList.\n\tfitRanges_ is an \
optional argument, if not specified then the entire data set is fitted. \
fitRanges_ can be\n\t1. single range {\!\(\*SubscriptBox[\(x\), \(min\)]\),\!\
\(\*SubscriptBox[\(x\), \(max\)]\)}\n\t2. a list of ranges \
{\!\(\*SubsuperscriptBox[\(x\), \(i\), \(min\)]\),\!\(\*SubsuperscriptBox[\(x\
\), \(i\), \(max\)]\)} for every traceList[[i]]\n\t3. a single Interval\n\t4. \
a list of Interval's for every traceList[[i]]\n\nOutput:\n\tlist of the fit \
replacement rules for each trace in traceList_\n\nOptions: \n\tFitFunction\
\[Rule]FindFit can be either FindFit (by default) of FindLogFit\>\""}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "ThreadFindFit", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"FitFunction", "\[Rule]", "FindFit"}], "}"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ThreadFindFit", "[", 
     RowBox[{"traceList_", ",", "fitModel_", ",", "pars_", ",", "vars_", ",", 
      RowBox[{"fitRanges", ":", 
       RowBox[{"Except", "[", 
        RowBox[{"_", "?", "OptionQ"}], "]"}], ":", "Full"}], ",", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", "ThreadFindFit", "}"}], "]"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "dataList", ",", "fitModelsList", ",", "parsList", ",", 
        "frIntervalsList"}], "}"}], ",", "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "reduce", " ", "the", " ", "input", " ", "parameters", " ", "from", 
         " ", "all", " ", "the", " ", "various", " ", "acceptable", " ", 
         "forms", " ", "to", " ", "a", " ", "single", " ", "one"}], " ", 
        "\[Dash]", " ", "lists"}], "*)"}], "\n", "\t", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"fitRanges", "===", "Full"}], ",", "\n", "\t\t", 
         RowBox[{"(*", 
          RowBox[{
          "if", " ", "the", " ", "entire", " ", "traces", " ", "are", " ", 
           "to", " ", "be", " ", "fitted"}], "*)"}], "\n", "\t\t", 
         RowBox[{"dataList", "=", "traceList"}], ",", "\n", "\t\t", "\n", 
         "\t\t", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"if", " ", "some", " ", "range", " ", "of", " ", "x"}], 
           "-", 
           RowBox[{
           "values", " ", "is", " ", "to", " ", "be", " ", "selected", " ", 
            "first"}]}], "*)"}], "\n", "\t\t", 
         RowBox[{
          RowBox[{"frIntervalsList", "=", 
           RowBox[{"Which", "[", "\n", "\t\t", 
            RowBox[{"(*", 
             RowBox[{
             "case", " ", "of", " ", "single", " ", "fit", " ", "interval", 
              " ", "for", " ", "all", " ", "the", " ", "traces"}], "*)"}], 
            "\n", "\t\t", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Head", "[", "fitRanges", "]"}], "===", "Interval"}], 
              ")"}], ",", "\n", "\t\t\t", 
             RowBox[{"Table", "[", 
              RowBox[{"fitRanges", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}], 
             ",", "\n", "\t\t", 
             RowBox[{"(*", 
              RowBox[{
              "case", " ", "of", " ", "individual", " ", "fit", " ", 
               "intervals"}], "*)"}], "\n", "\t\t", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Head", "[", "fitRanges", "]"}], "===", "List"}], 
               ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Head", "[", 
                 RowBox[{"fitRanges", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "Interval"}], 
               ")"}]}], ",", "\n", "\t\t\t", "fitRanges", ",", "\n", "\t\t", 
             RowBox[{"(*", 
              RowBox[{
              "case", " ", "of", " ", "single", " ", "fit", " ", "range", " ",
                "for", " ", "all", " ", "the", " ", "traces"}], "*)"}], "\n", 
             "\t\t", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Head", "[", "fitRanges", "]"}], "===", "List"}], 
               ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Head", "[", 
                 RowBox[{"fitRanges", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", "Interval"}], 
               ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Depth", "[", "fitRanges", "]"}], "==", " ", "2"}], 
               ")"}]}], ",", " ", "\n", "\t\t\t", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Interval", "[", "fitRanges", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}], 
             ",", "\n", "\t\t", 
             RowBox[{"(*", 
              RowBox[{
              "case", " ", "of", " ", "individual", " ", "fit", " ", 
               "ranges"}], "*)"}], "\n", "\t\t", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Head", "[", "fitRanges", "]"}], "===", "List"}], 
               ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Head", "[", 
                 RowBox[{"fitRanges", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
               ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Depth", "[", "fitRanges", "]"}], "==", " ", "3"}], 
               ")"}]}], ",", " ", "\n", "\t\t\t", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Interval", "[", 
                RowBox[{"fitRanges", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], 
              "]"}]}], "\n", "\t\t", "]"}]}], ";", "\n", "\t\t", 
          RowBox[{"dataList", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"traceList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{"IntervalMemberQ", "[", 
                 RowBox[{
                  RowBox[{"frIntervalsList", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}]}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}]}], 
          ";"}]}], "\n", "\t", "]"}], ";", "\n", "\t", 
       RowBox[{"fitModelsList", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "fitModel", "]"}], "=!=", " ", "List"}], ",", 
          "\n", "\t\t", 
          RowBox[{"Table", "[", 
           RowBox[{"fitModel", ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}], 
          ",", "\n", "\t\t", "fitModel"}], "\n", "\t", "]"}]}], ";", "\n", 
       "\t", 
       RowBox[{"parsList", "=", 
        RowBox[{"If", "[", "\n", "\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Depth", "[", "pars", "]"}], "<=", "2"}], " ", "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Depth", "[", "pars", "]"}], "==", "3"}], " ", "&&", 
             " ", 
             RowBox[{
              RowBox[{"DeleteDuplicates", "[", 
               RowBox[{"Head", "/@", 
                RowBox[{"Flatten", "[", "pars", "]"}]}], "]"}], "=!=", " ", 
              RowBox[{"{", "Symbol", "}"}]}]}], ")"}]}], " ", ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{"pars", ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}], 
          ",", "\n", "\t\t", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"pars", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}]}], 
         "\n", "\t", "]"}]}], ";", "\n", "\n", "\t", 
       RowBox[{"(*", 
        RowBox[{"perform", " ", "fitting"}], "*)"}], "\n", "\t", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"OptionValue", "[", "FitFunction", "]"}], "[", 
          RowBox[{
           RowBox[{"dataList", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"fitModelsList", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"parsList", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "vars"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}]}]}], 
     "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.7339178705336475`*^9, 3.733917913339658*^9}, {
  3.7345373464141545`*^9, 3.7345373513228006`*^9}, {3.7345374935210767`*^9, 
  3.7345375173398075`*^9}, {3.7345376080581307`*^9, 3.7345377423062515`*^9}, {
  3.734539808709217*^9, 3.7345398177540193`*^9}, {3.734539850856926*^9, 
  3.7345399161963816`*^9}, {3.7345457586289034`*^9, 3.734545760570993*^9}, {
  3.7345458526177034`*^9, 3.7345458537245045`*^9}, {3.734545930823085*^9, 
  3.734545932008355*^9}, {3.73454622819354*^9, 3.7345462921981087`*^9}, {
  3.73454638684256*^9, 3.734546390175509*^9}, {3.737778629650143*^9, 
  3.7377786359271965`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FitQualityCheck", "::", "usage"}], "=", 
   "\"\<FitQualityCheck[traceList_,fitRanges_,fitModel_,fitParameters_,fitVar_\
:x]\n\tPlots fits on top of the orifinal data.\n\nInput:\n\tfitModel needs to \
have fitVar as the free variable\n\tfitRanges should be either a single \
fitting interval for all the traces in traceList, or the list of individual \
fitting intervals for traceList[[i]]\n\nOptions:\n\tLogYPlot\[Rule]False,\n\t\
LogXPlot\[Rule]False\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "FitQualityCheck", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LogYPlot", "->", "False"}], ",", 
      RowBox[{"LogXPlot", "->", " ", "False"}]}], "}"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitQualityCheck", "[", 
    RowBox[{
    "traceList_", ",", "fitRanges_", ",", "fitModel_", ",", "fitParameters_", 
     ",", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", "FitQualityCheck", "}"}], "]"}]}], "]"}], ":=", "\n", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xPlotRanges", ",", "cPlotF", ",", "dPlotF"}], "}"}], ",", "\n",
      "\t", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "fitRanges", "]"}], "=!=", "List"}], ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Fit ranges is not a list\>\"", "]"}], ";", 
         RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\n", "\t\t", 
      RowBox[{"xPlotRanges", "=", 
       RowBox[{"Which", "[", "\n", "\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"Depth", "[", "fitRanges", "]"}], "==", " ", "2"}], ",", 
         " ", 
         RowBox[{"(*", 
          RowBox[{
          "case", " ", "of", " ", "single", " ", "fit", " ", "range", " ", 
           "for", " ", "all", " ", "the", " ", "traces"}], "*)"}], "\n", 
         "\t\t\t", 
         RowBox[{"Table", "[", 
          RowBox[{"fitRanges", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}], ",",
          "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"Depth", "[", "fitRanges", "]"}], "==", " ", "3"}], ",", 
         " ", 
         RowBox[{"(*", 
          RowBox[{
          "case", " ", "of", " ", "individual", " ", "fit", " ", "ranges"}], 
          "*)"}], "\n", "\t\t\t", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"fitRanges", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}]}], 
        "\n", "\t\t", "]"}]}], ";", "\n", "\n", "\t\t", 
      RowBox[{"cPlotF", "=", 
       RowBox[{"Which", "[", " ", 
        RowBox[{"(*", 
         RowBox[{
         "chose", " ", "continuous", " ", "plotting", " ", "function"}], 
         "*)"}], "\n", "\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"OptionValue", "[", "LogYPlot", "]"}], "&&", 
          RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ",", "LogLogPlot", 
         ",", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"OptionValue", "[", "LogYPlot", "]"}], "&&", 
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ")"}]}], ",", 
         "LogPlot", ",", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogYPlot", "]"}]}], ")"}], "&&", 
          RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ",", 
         "LogLinearPlot", ",", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogYPlot", "]"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ")"}]}], ",", 
         "Plot"}], "\n", "\t\t", "]"}]}], ";", "\n", "\t\t", 
      RowBox[{"dPlotF", "=", 
       RowBox[{"Which", "[", " ", 
        RowBox[{"(*", 
         RowBox[{"chose", " ", "discrete", " ", "plotting", " ", "function"}],
          "*)"}], "\n", "\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"OptionValue", "[", "LogYPlot", "]"}], "&&", 
          RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ",", 
         "ListLogLogPlot", ",", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"OptionValue", "[", "LogYPlot", "]"}], "&&", 
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ")"}]}], ",", 
         "ListLogPlot", ",", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogYPlot", "]"}]}], ")"}], "&&", 
          RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ",", 
         "ListLogLinearPlot", ",", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogYPlot", "]"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"OptionValue", "[", "LogXPlot", "]"}]}], ")"}]}], ",", 
         "ListPlot"}], "\n", "\t\t", "]"}]}], ";", "\n", "\n", "\t\t", 
      RowBox[{"Do", "[", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", "i", "]"}], ";", "\n", "\t\t\t", 
         RowBox[{"Print", "[", "\n", "\t\t\t\t", 
          RowBox[{"Show", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"dPlotF", "[", 
             RowBox[{
              RowBox[{"traceList", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", 
              RowBox[{"PlotRange", "->", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"xPlotRanges", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "Full"}], "}"}]}]}], 
             "]"}], ",", "\n", "\t\t\t\t\t", 
            RowBox[{"cPlotF", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", "fitModel", ")"}], "/.", 
               RowBox[{"fitParameters", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"Global`x", ",", 
                RowBox[{"xPlotRanges", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
                RowBox[{"xPlotRanges", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "}"}], ",", 
              RowBox[{"PlotStyle", "->", 
               RowBox[{"Directive", "[", 
                RowBox[{"Red", ",", "Thin"}], "]"}]}], ",", 
              RowBox[{"PlotRange", "->", "Full"}]}], "]"}]}], "\n", 
           "\t\t\t\t", "]"}], "\n", "\t\t\t", "]"}]}], ",", "\n", "\t\t", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "traceList", "]"}]}], "}"}]}], "]"}]}]}], 
    "\n", "]"}]}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.733917931615965*^9, 3.7339179675239677`*^9}, {
   3.7339180576504264`*^9, 3.733918236197213*^9}, {3.733918727317361*^9, 
   3.733918762591159*^9}, {3.7339188058385124`*^9, 3.7339188440587387`*^9}, {
   3.7345336679514303`*^9, 3.7345336781558027`*^9}, {3.7345337702243547`*^9, 
   3.7345337739129915`*^9}, {3.7345391406094456`*^9, 3.734539150722803*^9}, {
   3.734539216142032*^9, 3.7345392265377836`*^9}, {3.734539314258649*^9, 
   3.734539314833763*^9}, {3.7345393595407877`*^9, 3.7345393763688483`*^9}, {
   3.7345394340843024`*^9, 3.734539454541932*^9}, {3.73453952479661*^9, 
   3.7345395462154975`*^9}, {3.7345395807278595`*^9, 3.734539733632825*^9}, {
   3.737776687708971*^9, 3.7377767093826647`*^9}, {3.7377767612653317`*^9, 
   3.737776786497325*^9}, 3.7377771575889406`*^9, {3.737778655226861*^9, 
   3.737778657945129*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Batch data processing", "Section"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"LoadDataSeries", "::", "usage"}], "=", 
   "\"\<LoadDataSeries[namePattern_,parNamesList_:{x}]\n\tLoad a set of files \
with names, matching the namePattern_\n\nInput: \n\tnamePattern_ containing \
varibles which values are being swept and parNamesList_ that lists these \
variables.\n\tIn the case of single variable named x parNamesList may be \
omitted.  \n\nOutput: \n\t{parList, dataList}, where dataList[[i]] \
corresponds to the content of the file with name including parList[[i]]\n\t\
parList={\!\(\*SubscriptBox[\(x\), \(1\)]\), \!\(\*SubscriptBox[\(x\), \(2\)]\
\), ... } in the case of single parameter and {{\!\(\*SubscriptBox[\(x\), \(1\
\)]\),\!\(\*SubscriptBox[\(y\), \(1\)]\),\!\(\*SubscriptBox[\(z\), \
\(1\)]\)},..} in the case of multiple\n\t\nOptions:\n\tBy default the \
measurement files are loaded as Import[fileName,\\\"Table\\\"], custom \
loading function can be specified using FileLoadingFunction option, \n\twhich \
should return data if applied to file name\n\tBy default the parameters in \
file names are interpreted as numbers, they can also be kept in text format \
by setting the InterpretParameter\[Rule]False.\n\nExample: \n\t\
LoadDataSeries[x__~~\\\" nW pickoff.txt\\\"]\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "LoadDataSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"InterpretParameter", "\[Rule]", "True"}], ",", 
     RowBox[{"FileLoadingFunction", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"BaseDirectory", "\[Rule]", 
      RowBox[{"Directory", "[", "]"}]}]}], "}"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"LoadDataSeries", "[", 
    RowBox[{"namePattern_", ",", 
     RowBox[{"parNamesList", ":", 
      RowBox[{"Except", "[", 
       RowBox[{"_", "?", "OptionQ"}], "]"}], ":", 
      RowBox[{"{", "Global`x", "}"}]}], ",", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", "LoadDataSeries", "}"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "fileNamesList", ",", "dir", ",", "FLF", ",", "parList", ",", 
       "dataList", ",", "ret"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"dir", "=", 
       RowBox[{"OptionValue", "[", "BaseDirectory", "]"}]}], ";", "\n", "\t", 
      RowBox[{"fileNamesList", "=", 
       RowBox[{"FileNames", "[", 
        RowBox[{"namePattern", ",", "dir", ",", "Infinity"}], "]"}]}], 
      RowBox[{"(*", 
       RowBox[{
       "read", " ", "file", " ", "names", " ", "and", " ", "extract", " ", 
        "parameters", " ", "from", " ", "them"}], "*)"}], ";", "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"parList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"ToExpression", "@", 
            RowBox[{"StringCases", "[", 
             RowBox[{"fileNamesList", ",", 
              RowBox[{"namePattern", "->", "parNamesList"}]}], "]"}]}], ",", 
           "1"}], "]"}]}], ";"}], "*)"}], "\n", "\t", 
      RowBox[{"parList", "=", 
       RowBox[{"Table", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "InterpretParameter", "]"}], ",", "\n",
            "\t\t\t", 
           RowBox[{
            RowBox[{"Interpreter", "[", "\"\<Number\>\"", "]"}], "[", 
            RowBox[{
             RowBox[{"StringCases", "[", 
              RowBox[{"fileName", ",", 
               RowBox[{"namePattern", "->", "parNamesList"}]}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{"StringCases", "[", 
             RowBox[{"fileName", ",", 
              RowBox[{"namePattern", "->", "parNamesList"}]}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "\n", "\t\t", "]"}], ",", "\n", 
         "\t\t", 
         RowBox[{"{", 
          RowBox[{"fileName", ",", "fileNamesList"}], "}"}]}], "]"}]}], ";", 
      "\n", "\t", "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{"read", " ", "data", " ", "from", " ", "the", " ", "files"}], 
       "*)"}], "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FunctionQ", "[", 
         RowBox[{"OptionValue", "[", "FileLoadingFunction", "]"}], "]"}], ",",
         "\n", "\t\t", 
        RowBox[{"FLF", "=", 
         RowBox[{"OptionValue", "[", "FileLoadingFunction", "]"}]}], ",", 
        "\n", "\t\t", 
        RowBox[{"FLF", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Import", "[", 
            RowBox[{"#", ",", "\"\<Table\>\""}], "]"}], "&"}], ")"}]}]}], 
       "]"}], ";", "\n", "\t", 
      RowBox[{"dataList", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"FLF", "[", "fileName", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"fileName", ",", "fileNamesList"}], "}"}]}], "]"}]}], ";", 
      "\n", "\t", "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{
       "sort", " ", "parameters", " ", "and", " ", "data", " ", "sets", " ", 
        "according", " ", "to", " ", "increase", " ", "in", " ", "the", " ", 
        "first", " ", "parameter", " ", "in", " ", "parList"}], "*)"}], "\n", 
      "\t", 
      RowBox[{"ret", "=", 
       RowBox[{"Transpose", "@", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"parList", ",", "dataList"}], "}"}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"#1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "<", 
            RowBox[{"#2", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}]}], "]"}]}]}], 
      ";", "\n", "\t", "\n", "\t", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"If", " ", "only", " ", "one", " ", "parameter"}], ",", " ", 
        RowBox[{"flatten", " ", "the", " ", "parList"}]}], "*)"}], "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "parNamesList", "]"}], ">", "1"}], ",", "ret",
         ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"ret", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
          RowBox[{"ret", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], "\n", 
    "]"}]}], "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.7345465955852985`*^9, 3.734546598245433*^9}, {
   3.734549085480486*^9, 3.734549287809987*^9}, {3.7345498469823484`*^9, 
   3.7345499036338263`*^9}, {3.7345903481113367`*^9, 
   3.7345903603916545`*^9}, {3.7345973424514256`*^9, 3.734597386153448*^9}, {
   3.7377761303527155`*^9, 3.7377761484650373`*^9}, 3.7377762241846237`*^9, {
   3.7377762661553736`*^9, 3.737776286883362*^9}, 3.7377771659298873`*^9, {
   3.7377786609785604`*^9, 3.7377786653975105`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SelectRange", "::", "usage"}], "=", 
   "\"\<SelectRange[xylist_,xRange_], SelectRange[xylistd2_,xRange_]\n\t\
Return subset of xylist_ with x values within xRange_\n\nOptions:\n\tAccepts \
options of InRangeQ\>\""}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "SelectRange", "]"}], "=", 
   RowBox[{"Options", "[", "InRangeQ", "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SelectRange", "[", 
    RowBox[{
     RowBox[{"xylist_", "?", "XYListQ"}], ",", "xRange_", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", "SelectRange", "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Select", "[", 
    RowBox[{"xylist", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"InRangeQ", "[", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "xRange", ",", "opts"}], "]"}],
        ")"}], "&"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SelectRange", "[", 
     RowBox[{
      RowBox[{"xylistd2_", "?", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"XYListQ", "[", 
          RowBox[{"#", ",", "2"}], "]"}], "&"}], ")"}]}], ",", "xRange_", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", 
        RowBox[{"{", "SelectRange", "}"}], "]"}]}]}], "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Select", "[", 
       RowBox[{"xylist", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"InRangeQ", "[", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", "xRange", ",", "opts"}], 
           "]"}], ")"}], "&"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"xylist", ",", "xylistd2"}], "}"}]}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{"End", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.734546627865629*^9, 3.7345466295478487`*^9}, {
   3.734547425049396*^9, 3.7345474331763906`*^9}, {3.734547867239811*^9, 
   3.734548125546877*^9}, {3.7345481625783978`*^9, 3.7345481875924163`*^9}, {
   3.734548279897182*^9, 3.7345483147403464`*^9}, {3.7345486982210283`*^9, 
   3.7345487717640295`*^9}, 3.73455005322637*^9, {3.7345986350734935`*^9, 
   3.7345986549329605`*^9}, {3.7377786996065073`*^9, 3.737778706812752*^9}}]
}, Closed]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{1282, 772},
WindowMargins->{{36, Automatic}, {Automatic, 108}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 618, 15, 50, "Input",
 CellID->484687852],
Cell[1179, 37, 771, 21, 69, "Code"],
Cell[CellGroupData[{
Cell[1975, 62, 159, 2, 70, "Section"],
Cell[2137, 66, 832, 20, 159, "Code"]
}, Closed]],
Cell[CellGroupData[{
Cell[3006, 91, 116, 1, 56, "Section"],
Cell[3125, 94, 1291, 36, 142, "Code"],
Cell[4419, 132, 620, 16, 87, "Code"],
Cell[5042, 150, 992, 17, 196, "Code"],
Cell[6037, 169, 1492, 36, 141, "Code"],
Cell[7532, 207, 1007, 27, 123, "Code",
 InitializationCell->True],
Cell[8542, 236, 3262, 82, 501, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11841, 323, 126, 1, 70, "Section"],
Cell[CellGroupData[{
Cell[11992, 328, 121, 1, 49, "Subsection"],
Cell[12116, 331, 626, 16, 69, "Code"],
Cell[12745, 349, 4186, 136, 285, "Code"]
}, Closed]],
Cell[CellGroupData[{
Cell[16968, 490, 124, 1, 41, "Subsection"],
Cell[17095, 493, 13303, 331, 1419, "Code"]
}, Closed]],
Cell[CellGroupData[{
Cell[30435, 829, 170, 2, 41, "Subsection"],
Cell[30608, 833, 1793, 48, 267, "Code"],
Cell[32404, 883, 3849, 101, 519, "Code"],
Cell[36256, 986, 2700, 68, 537, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38993, 1059, 102, 1, 49, "Subsection"],
Cell[39098, 1062, 3706, 88, 466, "Code"],
Cell[42807, 1152, 7842, 204, 609, "Code"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50698, 1362, 113, 1, 70, "Section"],
Cell[50814, 1365, 455, 13, 50, "Code"],
Cell[51272, 1380, 1458, 41, 105, "Code"],
Cell[52733, 1423, 600, 14, 87, "Code"]
}, Closed]],
Cell[CellGroupData[{
Cell[53370, 1442, 96, 1, 56, "Section"],
Cell[53469, 1445, 1941, 50, 231, "Code"],
Cell[55413, 1497, 10689, 255, 1077, "Code"],
Cell[66105, 1754, 10519, 244, 1096, "Code"],
Cell[76627, 2000, 7981, 187, 933, "Code"]
}, Closed]],
Cell[CellGroupData[{
Cell[84645, 2192, 40, 0, 56, "Section"],
Cell[84688, 2194, 7018, 160, 897, "Code"],
Cell[91709, 2356, 2397, 63, 285, "Code"]
}, Closed]]
}
]
*)

